/**
 * Example of using the generated workflow types
 *
 * This shows how to use the type-safe workflow functions
 * generated by the PocketFlow CLI
 */
import {
  runTwitterSearchWorkflow,
  TwitterSearchWorkflowInput,
} from "../src/flows";

/**
 * Main function demonstrating the use of type-safe workflow functions
 */
async function main() {
  try {
    console.log("Running Twitter search workflow...");

    // Define input with full type safety
    const input: TwitterSearchWorkflowInput = {
      query: "artificial intelligence news",
      maxResults: 50,
      includeRetweets: false,
    };

    // The auth token is now required and used inside the workflow function
    const authToken = "your_auth_token";

    // Run the workflow with type-safe input and output
    // The socket parameter is optional - if not provided, the function will create one
    const result = await runTwitterSearchWorkflow(input, authToken);

    // Type-safe access to the result
    console.log(`Search completed! Found ${result.totalResults} tweets`);
    console.log(`Success: ${result.success}`);

    // We can safely access the tweets array and its properties
    result.tweets.forEach((tweet, index) => {
      console.log(`Tweet ${index + 1}: ${tweet.text}`);
      console.log(`  By: ${tweet.author}`);
      console.log(`  Likes: ${tweet.likes}`);
    });
  } catch (error) {
    console.error(
      "Error:",
      error instanceof Error ? error.message : "Unknown error"
    );
  }
}

// In a real application, you would run this function
// main().catch(console.error);

// Output example for this demo
console.log(`
Example Output (simulation):
---------------------------
Running Twitter search workflow...
Search completed! Found 42 tweets
Success: true
Tweet 1: Just read an amazing article about the latest developments in AI!
  By: @ai_enthusiast
  Likes: 325
Tweet 2: Breaking: New AI model outperforms humans in medical diagnosis tasks
  By: @tech_news
  Likes: 1240
...and so on
`);

/**
 * Benefits of the generated type-safe workflow runners:
 *
 * 1. Autocomplete for input properties
 * 2. Type checking for required properties
 * 3. Autocomplete and type safety for output properties
 * 4. Documentation in IDE via JSDoc comments
 * 5. Refactoring support
 * 6. Authentication handling built-in
 * 7. Socket connection management built-in
 */
